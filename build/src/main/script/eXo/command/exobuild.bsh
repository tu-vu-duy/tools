import java.util.ArrayList ; 

exobuild(String[] args) {

  printInstructions() {
    print(
      "\n\n" +
      "Usage the exobuild command: \n\n" +
      "  exobuild --product=[portal,ecm,groupware,all] [--update]  [--build-dependencies] [--deploy=tomcat,jboss,jonas] \n\n" +
      "Options: \n" +
      "  * --product            is mandatory. The possible names are portal, ecm, groupware, all \n" +
      "  * --update             is optional. If you add this option, exobuild  will make a \n" +
      "                         svn update before it builds \n" +
      "  * --build              is optional. If you add this option, the exobuild command \n" +
      "                         will compile and install the sub projects of the product, \n" +
      "  * --build-dependencies is optional. If you add this option, the exobuild command \n" +
      "                         will build the dependant modules of the product, \n" +
      "                         for example: kernel, core, portal... \n" +
      "  * --deploy             is optional. The possible names are tomcat-server, jboss-server, and \n" +
      "                         jonas-server. If you enter only --deploy, the tomcat-server will be used \n" +
      "  * --database           is optional. This option must use with the --deploy option. The possible \n" +
      "                         values are hsql, mysql, oracle, postgres, derby and mssql \n" +
      "  * --ask                is optional. This option is used with --database option. it allow you to \n" +
      "                         enter the connection url , username and password of the database server \n" 
    );
  }

  importCommands("eXo.server") ;
  importCommands("eXo.projects") ;
  boolean build_ = false ;
  boolean buildDependencies_ = false ;
  boolean update_ = false ;
  boolean ask = false ;
  boolean generateSite = false ;

  maven = maven() ;
  exosvn = exosvn() ;
  server = null ;
  product = null ;
  database = null;
  
  for(int i = 0; i < args.length; i++) {
    String arg = args[i] ;
    if ("--update".equals(arg)) update_ = true ;
    else if ("--build".equals(arg))  build_ = true ;
    else if ("--build-dependencies".equals(arg))  buildDependencies_ = true ;
    else if ("--site".equals(arg))  generateSite = true ;
    else if ("--ask".equals(arg))  ask = true ;
    else if (arg.startsWith("--deploy"))  {
      if(arg.equals("--deploy=jboss")) server = Jboss(eXo.env.workingDir + "/exo-jboss") ;
      else if(arg.equals("--deploy=jonas")) server = Jonas(eXo.env.workingDir + "/exo-jonas") ;
      else server = Tomcat(eXo.env.workingDir + "/exo-tomcat") ;
    } else if(arg.startsWith("--database")) {
      if(arg.equals("--database=mysql")) database = Database().MysqlDB() ;
    } else if ("--product=exo-portal".equals(arg)) {
      product = eXoProduct().eXoPortalProduct();
    } else if ("--product=portal".equals(arg)) {
      product = eXoProduct().eXoPortalProduct();
    } else if ("--product=exo-ecm".equals(arg)) {
      product = eXoProduct().eXoECMProduct();
    } else if ("--product=ecm".equals(arg)) {
      product = eXoProduct().eXoECMProduct();
    } else if ("--product=groupware".equals(arg)) {
      product = eXoProduct().eXoGroupwareProduct();
    } else if ("--product=all".equals(arg)) {
      product = eXoProduct().eXoAllProduct();
    }
  }
  
  if (product == null) { 
    printInstructions() ;
    return ;
  }
  
  ArrayList tasks =  new ArrayList() ;
  
  if(database == null) database = Database().HsqlDB() ;
  //if(server == null) server = Tomcat(eXo.env.workingDir + "/exo-tomcat") ; 
  
  if(server != null && ask) {
    tasks.add(database.GetConfigTask(product, server)) ;
  }
    
  if(update_) {
    if(buildDependencies_) {
      for(i = 0; i < product.dependencyCodeRepos.size(); i++) {
        String moduleDir = eXo.env.eXoProjectsDir + "/" + product.dependencyCodeRepos.get(i) ;
        tasks.add(exosvn.UpdateTask(moduleDir));
      }
    }
    tasks.add(exosvn.UpdateTask(eXo.env.eXoProjectsDir + "/" + product.codeRepo));
  }

  String[] mvnArgs = {"clean", "install"} ;
  if(buildDependencies_) {
    for(i = 0; i < product.dependencyCodeRepos.size(); i++) {
      String dependencyModuleDir = eXo.env.eXoProjectsDir + "/" + product.dependencyCodeRepos.get(i) ;
      tasks.add(maven.MavenTask(dependencyModuleDir, mvnArgs));
    }
  }

  String moduleDir = eXo.env.eXoProjectsDir + "/" + product.codeRepo ;
  if(build_) {
    tasks.add(maven.MavenTask(moduleDir, mvnArgs));
  }
  
  if(server != null) { 
    tasks.add(product.DeployTask(product, server, eXo.env.m2Repos)) ;
    tasks.add(database.DeployTask(product, server, eXo.env.m2Repos)) ;
    tasks.add(database.ConfigureTask(product, server)) ;
  }
  
  if(generateSite) {
    String[] mvnArgs = {"site"} ;
    for(i = 0; i < product.dependencyCodeRepos.size(); i++) {
      String dependencyModuleDir = eXo.env.eXoProjectsDir + "/" + product.dependencyCodeRepos.get(i) ;
      tasks.add(maven.MavenTask(dependencyModuleDir, mvnArgs));
    }
    tasks.add(maven.MavenTask(moduleDir, mvnArgs));
  }

  for(int i = 0; i < tasks.size(); i++) {
    task = tasks.get(i) ;
    long start = System.currentTimeMillis() ;
    task.descriptor.banner() ;
    task.execute() ;
    task.descriptor.executionTime =  System.currentTimeMillis() - start ;
    task.descriptor.report() ;
  }
  
  System.exit(0) ;
}
