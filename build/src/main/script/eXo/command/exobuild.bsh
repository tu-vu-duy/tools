import java.util.ArrayList ; 
import java.io.File ; 

ReleaseTask(server, product) {
  descriptor = TaskDescriptor("Release Task", server.serverHome) ;
  execute() {
    String[]  commands = {"svn", "info", eXo.env.eXoProjectsDir + "/" + product.codeRepo} ;
    String result = eXo.System.run(commands) ; 
    String[] line = result.split("\n") ;
    String revision = "unknown" ;
    for(int i = 0; i < line.length; i++) {
      if(line[i].startsWith("Revision: ")) {
        revision = line[i].substring("Revision: ".length(), line[i].length()) ;
      }
    }
    eXo.IOUtil.zip(server.serverHome, eXo.env.workingDir, "exo-enterprise-webos-r" + revision + "-" + server.name) ;
  }
  return this ;
}

exobuild(String[] args) {

  printInstructions() {
    print(
      "\n\n" +
      "Usage the exobuild command: \n\n" +
      "  exobuild --product=[portal,ecm,groupware,all] [--update]  [--exclude=all,pc,jcr,..] [--deploy=tomcat,jboss,jonas] \n\n" +
      "Options: \n" +
      "  * --product            is mandatory. The possible names are portal, ecm, groupware, all \n" +
      "  * --update             is optional. If you add this option, exobuild  will make a \n" +
      "                         svn update before it builds \n" +
      "  * --build              is optional. If you add this option, the exobuild command \n" +
      "                         will compile and install the sub projects of the product, \n" +
      "  * --exclude            is optional. You can specify any module name. Ideal when one dependency\n" +
      "                         makes the compilation break. \n" +
      "  * --deploy             is optional. The possible names are tomcat-server, jboss-server, and \n" +
      "                         jonas-server. If you enter only --deploy, the tomcat-server will be used \n" +
      "  * --clean-mvn-repo     is optional. This option is allowed you to delete the exo artifact in the maven repository \n" +
      "  * --database           is optional. This option must use with the --deploy option. The possible \n" +
      "                         values are hsql, mysql, oracle, postgres, derby and mssql \n" +
      "  * --ask                is optional. This option is used with --database option. it allow you to \n" +
      "                         enter the connection url , username and password of the database server \n" 
    );
  }

  importCommands("eXo.server") ;
  importCommands("eXo.projects") ;
  boolean build_ = false ;
  boolean update_ = false ;
  boolean ask = false ;
  boolean cleanMVNRepo_ = false ;
  boolean release_ = false ;
  String exclude_ = null ;

  maven = maven() ;
  exosvn = exosvn() ;
  server = null ;
  deployServers = null ;
  product = null ;
  database = null;
  
  for(int i = 0; i < args.length; i++) {
    String arg = args[i] ;
    if ("--update".equals(arg)) update_ = true ;
    else if ("--build".equals(arg))  build_ = true ;
    else if ("--ask".equals(arg))  ask = true ;
    else if ("--clean-mvn-repo".equals(arg)) cleanMVNRepo_ = true ;
    else if ("--release".equals(arg)) {
      release_ = true ;
    } else if ("--release=all".equals(arg)) {
      release_ = true ;
      deployServers = new Object[] { 
        Jboss(eXo.env.workingDir + "/exo-jboss") ,
        Jonas(eXo.env.workingDir + "/exo-jonas") ,
        Tomcat(eXo.env.workingDir + "/exo-tomcat")
      } ; 
    } else if (arg.startsWith("--exclude="))  {
      exclude_ = arg.substring("--exclude=".length()) ;
    } else if (arg.startsWith("--deploy")) {
      if(arg.equals("--deploy=jboss")) server = Jboss(eXo.env.workingDir + "/exo-jboss") ;
      else if(arg.equals("--deploy=jonas")) server = Jonas(eXo.env.workingDir + "/exo-jonas") ;
      else server = Tomcat(eXo.env.workingDir + "/exo-tomcat") ;
    } else if(arg.startsWith("--database")) {
      if(arg.equals("--database=mysql")) database = Database().MysqlDB() ;
    } else if ("--product=exo-portal".equals(arg)) {
      product = eXoProduct().eXoPortalProduct();
    } else if ("--product=portal".equals(arg)) {
      product = eXoProduct().eXoPortalProduct();
    } else if ("--product=exo-ecm".equals(arg)) {
      product = eXoProduct().eXoECMProduct();
    } else if ("--product=ecm".equals(arg)) {
      product = eXoProduct().eXoECMProduct();
    } else if ("--product=groupware".equals(arg)) {
      product = eXoProduct().eXoGroupwareProduct();
    } else if ("--product=all".equals(arg)) {
      product = eXoProduct().eXoAllProduct();
    } else {
      print("Unknown argument: " + arg);
      printInstructions() ;
    }
  }
  
  if (product == null) { 
    printInstructions() ;
    return ;
  }
  
  ArrayList tasks =  new ArrayList() ;
  
  if(database == null) database = Database().HsqlDB() ;
  
  if(release_ && server == null) {
    server = Tomcat(eXo.env.workingDir + "/exo-tomcat") ;
  }

  if(server != null  && deployServers == null) {
    deployServers = new Object[] { server } ; 
  }
  
  if(deployServers != null  && ask) {
    tasks.add(database.GetConfigTask()) ;
  }
    
  if(update_) {
    if(!"all".equals(exclude_)) {
      for(i = 0; i < product.dependencyModule.length; i++) {
        module = product.dependencyModule[i] ;
        if(exclude_ == null || exclude_.indexOf(module.name) < 0) {
          String moduleDir = eXo.env.eXoProjectsDir + "/" + module.relativeSRCRepo ;
          File directory = new File(moduleDir);
          if(directory.exists()) tasks.add(exosvn.UpdateTask(moduleDir));
        }
      }
    }
    tasks.add(exosvn.UpdateTask(eXo.env.eXoProjectsDir + "/" + product.codeRepo));
  }


  if(build_) {
    String[] mvnArgs = {"clean", "install"} ;
    for(i = 0; i < product.dependencyModule.length; i++) {
      module = product.dependencyModule[i] ;
      if(cleanMVNRepo_) {
        eXo.IOUtil.delete(eXo.env.dependenciesDir + "/repository/" + module.relativeMavenRepo) ;
      }
      if(!"all".equals(exclude_)) {
        if(exclude_ == null || exclude_.indexOf(module.name) < 0) {
          String moduleDir = eXo.env.eXoProjectsDir + "/" + module.relativeSRCRepo ;
          File directory = new File(moduleDir);
          if(directory.exists()) {
            tasks.add(maven.MavenTask(moduleDir, mvnArgs));
          }
        }
      }
    }
    String moduleDir = eXo.env.eXoProjectsDir + "/" + product.codeRepo ;
    tasks.add(maven.MavenTask(moduleDir, mvnArgs));
  }
  
  if(deployServers != null) { 
    for(int i = 0; i < deployServers.length; i++) {
      server =  deployServers[i] ;
      tasks.add(product.DeployTask(product, server, eXo.env.m2Repos)) ;
      tasks.add(database.DeployTask(product, server, eXo.env.m2Repos)) ;
      tasks.add(database.ConfigureTask(product, server)) ;
      if(release_)tasks.add(ReleaseTask(server, product)) ;
    }
  }
  
  for(int i = 0; i < tasks.size(); i++) {
    task = tasks.get(i) ;
    long start = System.currentTimeMillis() ;
    task.descriptor.banner() ;
    task.execute() ;
    task.descriptor.executionTime =  System.currentTimeMillis() - start ;
    task.descriptor.report() ;
  }
  
  System.exit(0) ;
}
