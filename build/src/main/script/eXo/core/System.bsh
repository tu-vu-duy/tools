System() {
  boolean verbose = true ;

  addSystemClasspath(URL[] url) {
    ClassLoader sysClassLoader = ClassLoader.getSystemClassLoader();
    Class[] argTypes = new Class[] { URL.class };
    method = URLClassLoader.class.getDeclaredMethod("addURL", argTypes);
    method.setAccessible(true);
    for(i = 0; i < url.length; i++) {
      Object[] args = new Object[1] ;
      args[0] = url[i] ;
      method.invoke(sysClassLoader, args);
    }
  }

  info(String message) {
    String[] tmp = message.split("\n") ;
    for(i = 0; i < tmp.length; i++) {
      System.out.print("          " + tmp[i] + "\n") ;
    }
  }

  info(String tag, String message) {
    System.out.print("[" + tag + "]") ;
    for(i = tag.length() + 2; i < 10; i++) {
      System.out.print(" ") ;
    }
    String[] tmp = message.split("\n") ;
    System.out.print(tmp[0] + "\n") ;
    for(i = 1; i < tmp.length; i++) {
      System.out.print("          " + tmp[i] + "\n") ;
    }
  }

  verbose(String tag, String message) {
    if(verbose) info(tag, message) ;
  }

  verbose(String message) {
    if(verbose) info(message) ;
  }

  print(String message) {  System.out.print(message) ; }
  vprint(String message) {  if(verbose) System.out.print(message) ; }
  printIndentation() { System.out.print("          "); }
  vprintIndentation() { if(verbose) System.out.print("          "); }

  readInput(String message) {
    System.out.print(message) ;
    StringBuilder b = new StringBuilder() ;
    while(true) {
      int val =  System.in.read() ;
      if(val == 13) continue ;
      if(val == 10) break ;
      b.appendCodePoint(val) ;
    }
    return b.toString();
  }

  return this ;
}  