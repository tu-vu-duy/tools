import java.net.URL ;
import java.net.URLClassLoader ;
import java.util.ArrayList ;
import java.io.File ;

Jboss(String home) {
  runningInstance_ = null ;
  serverHome = home ;
  String name = "jboss" ;
  String cleanServer = "jboss-4.2.0" ;
  String deployLibDir =  serverHome  +  "/server/default/deploy/exoplatform.sar" ;
  String deployWebappDir = serverHome  +  "/server/default/deploy/exoplatform.sar" ;
  String patchDir = deployWebappDir ;
  

  RunTask() {
    descriptor =  TaskDescriptor("Run Jboss", serverHome + "/bin") ;
    execute() {
      String javaHome = eXo.env.javaHome ;
      System.setProperty("user.dir", descriptor.workingDir) ;
      System.setProperty("program.name", "run.sh") ;
      System.setProperty("java.io.tmpdir", serverHome + "/temp") ;
      URL[] sysClasspath = {
        new URL("file:" + javaHome +   "/lib/tools.jar"), 
        new URL("file:" + serverHome + "/bin/run.jar")
      } ;
      eXo.System.addSystemClasspath(sysClasspath) ; 

      ClassLoader contextLoader= Thread.currentThread().getContextClassLoader();
      ClassLoader jbossLoader = new URLClassLoader(new URL[0],contextLoader);
      Thread.currentThread().setContextClassLoader(jbossLoader);
      String[] args = new String[0] ;
      jboss = new org.jboss.Main() ;
      jboss.boot(args);
      runningInstance_ = jboss ;
      Thread.currentThread().setContextClassLoader(contextLoader); 
    }
    return this ;
  };
  
  StopTask() {
    descriptor =  TaskDescriptor("Stop Jboss", serverHome + "/bin") ;
    execute() {
      URL[] sysClasspath = {
        new URL("file:" + serverHome + "/bin/shutdown.jar"),
        new URL("file:" + serverHome + "/client/jbossall-client.jar") 
      } ;
      ClassLoader contextLoader= Thread.currentThread().getContextClassLoader();
      ClassLoader jbossLoader = new URLClassLoader(sysClasspath,contextLoader);
      Thread.currentThread().setContextClassLoader(jbossLoader);
      String[] args = { "-S" } ;
      org.jboss.Shutdown.main(args) ;
      runningInstance_ = null ;
      Thread.currentThread().setContextClassLoader(contextLoader); 
    }
    return this ;
  };
  
  CleanTask() {
    descriptor =  TaskDescriptor("Clean Jboss", serverHome + "/bin") ;
    execute() {
      eXo.IOUtil.emptyFolder(serverHome + "/temp");
    }
    return this ;
  }
  
  preDeploy(product) {  
    product.addDependencies(Project("commons-pool", "commons-pool", "jar", "1.2")) ;
    product.addDependencies(Project("commons-dbcp", "commons-dbcp", "jar", "1.2.1")) ;
    product.addDependencies(Project("org.exoplatform.portal", "exo.portal.server.jboss.plugin", "jar", "2.0")) ;
  }
  
  onDeploy(project) { 
  
  }
  
  postDeploy(product) {
    ServerUtil = ServerUtil() ;
    ServerUtil.createEarApplicationXml(deployWebappDir) ;
    ServerUtil.addClasspathForWar(deployLibDir) ;
    //Use jboss PrefixSorter deployer
    File portalFile = new File(deployWebappDir + "/portal.war"); 
    File newPortalFile = new File(deployWebappDir + "/01portal.war"); 
    portalFile.renameTo(newPortalFile) ;
    product.portalwar = "01portal.war" ;
  }
  
  return this ; 
}
